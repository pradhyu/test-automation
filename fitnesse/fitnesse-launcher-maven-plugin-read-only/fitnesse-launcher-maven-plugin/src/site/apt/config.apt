 ------
 Usage
 ------
 Stewart Cambridge
 ------


Configuration

%{include|source=apt/menu.apt}

* Plugin Configuration

+-----+
<project>
    [...]
    <properties>
        <!-- All properties will be available to FitNesse using '${variable}' syntax -->
    </properties>
    [...]
    <build>
        <plugins>
            <plugin>
                <groupId>uk.co.javahelp.fitnesse</groupId>
                <artifactId>fitnesse-launcher-maven-plugin</artifactId>
                <configuration>
                    <!-- These 12 are the default values -->
                    <port>9123</port>
                    <workingDir>${project.build.directory}/fitnesse</workingDir>
                    <root>FitNesseRoot</root>
                    <testResourceDirectory>src/test/fitnesse</testResourceDirectory>
                    <reportsDir>${workingDir}/reports</reportsDir>
                    <resultsDir>${workingDir}/results</resultsDir>
                    <summaryFile>${workingDir}/results/failsafe-summary.xml</summaryFile>
                    <createSymLink>true</createSymLink>
                    <excludeOptionalDependencies>true</excludeOptionalDependencies> <!-- Deprecated -->
                    <deletePluginsProperties>false</deletePluginsProperties> <!-- Note the 's' in "plugins" -->
                    <alwaysUnpackFitnesse>false</alwaysUnpackFitnesse>
                    <failIfNoTests>false</failIfNoTests>
                    
                    <!-- Since version 1.3.0 -->
                    <!-- See section 'Project Scope Dependencies' -->
                    <useProjectDependencies>
                        <!-- Any combination of scopes -->
                        <scope>scope</scope>
                    </useProjectDependencies>
                    
                    <!-- Since version 1.4.0 -->
                    <!-- See section 'Configuring Test Suites' -->
                    <launches>
                        <launch>
                            <suite>FirstTestSuite</suite>
                            <suiteFilter>tag1,tag2</suiteFilter>
                        </launch>
                        <launch>
                            <suite>SecondTestSuite</suite>
                            <excludeSuiteFilter>tag1,tag2</excludeSuiteFilter>
                        </launch>
                        <launch>
                            <suite>MyTestSuite.NestedSuite</suite>
                            <runTestsMatchingAllTags>tag1,tag2</runTestsMatchingAllTags>
                        </launch>
                        <launch>
                            <test>MyTestSuite.NestedSuite.AnIndividualTest</test>
                        </launch>
                    </launches>

                    <!--
                        Pre-1.4.0 config is still valid, and in fact is senior,
                        to allow override or specifying of suite or test from command line
                        
                            using -Dfitnesse.suite=X
                            or    -Dfitnesse.test=Y
                    -->
                    <!-- These 3 are mutually exclusive;
                         Only configure one of the following.
                    -->
                    <!-- See section 'Configuring Test Suites' -->
                    <suite>MyTestSuite</suite>
                    <suite>MyTestSuite.NestedSuite</suite>
                    <test>MyTestSuite.NestedSuite.AnIndividualTest</test>
                    
                    <!--
                        These 3 are only honoured if top-level <suite> or <test> is in use,
                        either configured as directly above,
                        or through the use of command line property.
                    -->
                    <suiteFilter>tag1,tag2</suiteFilter>
                    <excludeSuiteFilter>tag3,tag4</excludeSuiteFilter>
                    <runTestsMatchingAllTags>tag5,tag6</runTestsMatchingAllTags>
                </configuration>
                <dependencies>
                    <!-- See section 'Individually Specified Dependencies' -->
                    <dependency>
                        <groupId>groupId</groupId>
                        <artifactId>artifactId</artifactId>
                        <version>version</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
    [...]
</project>
+-----+

  * Also see section {{{./filtering.html}Configuring Test Suites}}.

** CreateSymLink Option
 
  *

    Only your project specific FitNesse tests need go under <<<src/test/fitnesse>>>.
 
  *

    By setting <<<createSymLink>>> to <<<true>>>, the plugin will
    create a {{{http://fitnesse.org/FitNesse.FullReferenceGuide.UserGuide.FitNesseWiki.SymbolicLinks}FitNesse SymLink}}
    directly from its working directory to your test suite under <<<src/test/fitnesse>>>.
 
  *

    This is most useful when developing tests in '<<<wiki>>>' mode,
    as then you can directly scm commit your wiki test page changes,
    without having to also commit FitNesse server files,
    or having to <<<svn:ignore>>> the <<<ErrorLogs>>> directory, etc.
 
  *

    <<This is the default.>>
 
  *

    If you prefer to copy-resources from <<<src/test/fitnesse>>> into <<</target/fitnesse>>>
    or use some other mechanism, set <<<createSymLink>>> to <<<false>>>.
                    
* Classpath Dependencies
  
** Project Scope Dependencies
  
  *

    By using <<<\<useProjectDependencies/\>>>>, all the dependencies for a given set of scopes can be configured with ease.

  *

    The dependencies (including transitive dependencies) are added to the FitNesse classpath in the same order they are specified in the project dependencies.

  *
  
    When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Using dependencies in the following scopes: [system, compile, provided, runtime, test]
+-----+

** Transitive Dependencies

  *

    In version 1.3.0 and earlier, transitive dependencies were programmatically calculated by the plugin,
    and dependencies which are optional were included by default in the FitNesse classpath.

  *

    From version 1.4.0 onwards, transitive dependencies are calculated by the Maven internal API,
    which follows all the standard Maven rules, including excluding optional dependencies.
    This reduces the runtime size of the FitNesse classpath significantly for large projects.
See {{{http://code.google.com/p/fitnesse-launcher-maven-plugin/issues/detail?id=30}project issue #30}}.
    
  *

    Optional transitive dependencies can be included by setting the config property <<<fitnesse.excludeOptionalDependencies=false>>>.
    This configuration to include optional dependencies would then engage the pre-1.4.0 behaviour.
    This should be used with caution, and is considered a deprecated option,
    as the dependency resolution may result in duplicates or conflicts. 
See {{{http://code.google.com/p/fitnesse-launcher-maven-plugin/issues/detail?id=27}project issue #27}}.
    When using this option, look for the following in the Maven output:
  
+-----+
[INFO] Including transitive dependencies which are optional
+-----+

  *

    This only applies to dependencies brought in through the use of <<<\<useProjectDependencies/\>>>>.
    
    
** Individually Specified Dependencies

  *

    Any individual dependency can also be specified in the <<<\<dependencies/\>>>> section of the plugin.

  *

    The dependencies (including transitive dependencies) are added to the FitNesse classpath in the same order they are specified in the plugin configuration.

  *
  
    When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Using dependencies specified in plugin config
+-----+

** Using Both Together

  *

    Individual and project scope dependency configurations can be used together, or separately; both are optional.

  *

    Individually specified dependencies will appear earlier in the classpath than those specified using scopes.

** Example Dependency Configuration

  * Also see {{{../fitnesse-launcher-java-example/index.html}Example Java Project}}

+-----+
<project>
    [...]
    <build>
        <plugins>
            <plugin>
                <groupId>uk.co.javahelp.fitnesse</groupId>
                <artifactId>fitnesse-launcher-maven-plugin</artifactId>
                <configuration>
                    <useProjectDependencies>
                        <!-- Any combination of scopes -->
                        <scope>system</scope>
                        <scope>compile</scope>
                        <scope>provided</scope>
                        <scope>runtime</scope>
                        <scope>test</scope>
                    </useProjectDependencies>
                </configuration>
                <dependencies>
                    <!--
                        Any dependency (including transitive dependencies thereof) placed here
                        will be available to FitNesse in the variable ${maven.classpath}
                    -->
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-context</artifactId>
                        <version>3.2.0.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
    [...]
</project>
+-----+

* FitNesse Classpath Configuration

  *

    The FitNesse variable <<<$\{maven.classpath\}>>> is created from the dependency configurations as a series of <<<!path>>> statements.

  *

    Place the following configuration idiom on a Test Suite page, high up enough the directory structure to cover all the Test pages which need it.

+-----+
!*> '''Classpath'''
${maven.classpath}
*!
+-----+

* FitNesse Variables

  * The plugin defines the following as FitNesse Variables, accessible using '<<<$\{variable\}>>>' syntax:
  
    [maven.classpath] Configured from <<<\<dependencies\>>>> and <<<\<useProjectDependencies/\>>>>, as described above.
    
    [artifact] The artifact name of the end-user project.
    
    [version] The version of the end-user project.
    
    [basedir] The canonical filesystem path to the end-user project base directory (containing the <<<pom.xml>>>).
    
    [All project properties] As configured in the <<<\<properties\>>>> section of the <<<pom.xml>>>. Can be overridden on command line using '<<<-Dname=value>>>', but a default value must be configured in the <<<pom.xml>>> first, for this to be picked up.
    
  * When the build is running, look for the following in the Maven output:
  
+-----+
[INFO] Setting FitNesse variable [x] to [y]
+-----+

